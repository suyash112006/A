cg practical 4

#include <graphics.h>
#include <math.h>
#include <iostream>
using namespace std;

const int INSIDE = 0; 
const int LEFT = 1;    
const int RIGHT = 2;   
const int BOTTOM = 4;  
const int TOP = 8;     

class Clipping {
public:
    int x1, y1, x2, y2; 

    Clipping(int x_start, int y_start, int x_end, int y_end) {
        x1 = x_start;
        y1 = y_start;
        x2 = x_end;
        y2 = y_end;
    }

    void drawLine(int color) {
        setcolor(color);
        line(x1, y1, x2, y2);
    }

    void drawWindow() {
        setcolor(WHITE);
        rectangle(100,100,300,300);
    }

    int computeCode(int x, int y) {
        int code = INSIDE;

        if (x < 100)     
            code = LEFT;
        else if (x > 300)  
            code = RIGHT;
        if (y < 100)      
            code = BOTTOM;
        else if (y > 300)  
            code = TOP;

        return code;
    }

    void cohenSutherlandClip() {
        int code1 = computeCode(x1, y1);
        int code2 = computeCode(x2, y2);
        bool accept = false;

        while (true) {
            if ((code1 == 0) && (code2 == 0)) {
                accept = true;
                break;
            } else if (code1 & code2) {
                break;
            } else {
                int code_out;
                int x, y;

                if (code1 != 0)
                    code_out = code1;
                else
                    code_out = code2;

                if (code_out & TOP) {
                    x = x1 + (x2 - x1) * (300 - y1) / (y2 - y1);
                    y = 300;
                } else if (code_out & BOTTOM) { 
                    x = x1 + (x2 - x1) * (100 - y1) / (y2 - y1);
                    y = 100;
                } else if (code_out & RIGHT) { 
                    y = y1 + (y2 - y1) * (300 - x1) / (x2 - x1);
                    x = 300;
                } else if (code_out & LEFT) {  
                    y = y1 + (y2 - y1) * (100 - x1) / (x2 - x1);
                    x = 100;
                }

                if (code_out == code1) {
                    x1 = x;
                    y1 = y;
                    code1 = computeCode(x1, y1);
                } else {
                    x2 = x;
                    y2 = y;
                    code2 = computeCode(x2, y2);
                }
            }
        }

        if (accept) {
            cleardevice();
            drawWindow(); 
            drawLine(GREEN); 
            cout<<x1<<y1<<x2<<y2;
        } else {
            cout << "Line rejected.\n";
        }
    }
};

int main() {

    int gd = DETECT, gm;
   char data[] = "C:\\MinGW\\lib\\libbgi.a"; //static file

    initgraph(&gd, &gm, data);

    int x1, y1, x2, y2;
    cout << "Enter the endpoints of the line (x1 y1 x2 y2): ";
    cin >> x1 >> y1 >> x2 >> y2;

    Clipping clip(x1, y1, x2, y2);

    clip.drawWindow(); 
    clip.drawLine(RED); 
    delay(2000);
    clip.cohenSutherlandClip();
    delay(2000);
    closegraph();
    return 0;
}